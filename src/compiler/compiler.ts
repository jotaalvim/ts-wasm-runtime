import { WASMCode, WASMFunctionTableEntry } from "../wasm-vm/wasm-code"
import { ASTFunction, ASTFunctionInstruction } from "../wasm-parser/func"
import { ASTModule } from "../wasm-parser/module"
import { flatten } from "../misc/array"
import { ASTBlock } from "../wasm-parser/block"

const compileInstruction = (inst: ASTFunctionInstruction): WASMCode[] => {
  switch (inst.opType) {
    case "block": {
      const block = inst as ASTBlock
      const body = flatten(block.body.map(compileInstruction))
      return [
        { opcode: "_push", parameters: [0] },
        ...body,
        { opcode: "_pop", parameters: [block.result ? 1 : 0] }
      ]
    }
    default:
      break
  }
  return [
    {
      opcode: inst.opType,
      parameters: inst.parameters as number[] // TODO: 文字列を解決する
    }
  ]
}

const compileFunction = (ast: ASTFunction): WASMCode[] => {
  const prologue: WASMCode[] = [
    { opcode: "_push", parameters: [ast.parameters.length] },

    // initialize local values
    ...flatten(
      ast.locals.map((_, i) => [
        { opcode: "i32.const", parameters: [0] },
        { opcode: "set_local", parameters: [i] }
      ])
    )
  ]
  const fn: WASMCode[] = flatten(ast.body.map(compileInstruction))

  const epilogue: WASMCode[] = [
    { opcode: "_pop", parameters: [1] },
    { opcode: "_ret", parameters: [] }
  ]

  // TODO: 変数の identifier を index に置換
  return [...prologue, ...fn, ...epilogue]
}

// Compiles AST generated by wasm-parser.ts into machine code for wasm-vm.ts.
export const compile = (
  ast: ASTModule
): [WASMCode[], WASMFunctionTableEntry[]] => {
  // TODO: functions 以外を実装
  const codes = ast.functions.map(compileFunction)

  const table = ast.functions.map(fn => {
    let pointer = 0
    let i = 0
    for (const f of ast.functions) {
      if (f === fn) {
        break
      }
      pointer += codes[i].length
      i++
    }

    return {
      export: fn.export,
      identifier: fn.identifier,
      locals: fn.locals,
      parameters: fn.parameters.map(p => p.type),
      pointer
    } as WASMFunctionTableEntry
  })

  // TODO: identifier を function table から pointer に置換

  return [flatten(codes), table]
}
