import {
  PartialInstructionSet,
  WASMCode,
  WASMMemory,
  WASMContext
} from "../wasm-code"
import { range } from "../../misc/array"

// Internal instructions generated by compiler
export const internalInstructionSet: PartialInstructionSet<
  WASMCode,
  WASMMemory
> = code => {
  switch (code.opcode) {
    case "_push":
      return (code, { callStack, values }) => {
        const retAddr = values.pop()
        // 指定された数のパラメータを values から pop して新しいスタックに積む
        const locals = range(0, code.parameters[0]).map(_ => values.pop())
        // 少し汚いが _ret 用に再びスタックに積んでおく
        values.push(retAddr)
        const ctx = new WASMContext(locals)
        callStack.push(ctx)
      }
    case "_pop":
      return (code, { callStack, values }) => {
        // 指定された数の戻り値を pop 後のスタックに積む
        const returnValues = range(0, code.parameters[0]).map(_ => values.pop())
        callStack.pop()
        const ctx = callStack.peek()
        const retAddr = ctx.values.pop()
        returnValues.forEach(ctx.values.push)
        // _ret 用に先頭に移動しておく
        ctx.values.push(retAddr)
      }
    case "_jump":
      return (code, _, _pc, jump) => {
        jump(code.parameters[0])
      }
    case "_ret":
      return (_, { values }, _pc, jump) => {
        jump(values.pop())
      }
  }
  return null
}
