import {
  PartialInstructionSet,
  WASMCode,
  WASMMemory,
  WASMContext
} from "../wasm-code"
import { range } from "../../misc/array"

export const popStack = ({ callStack, values }: WASMMemory) => {
  const { resultLength } = callStack.peek()
  // 指定された数の戻り値を pop 後のスタックに積む
  const returnValues = range(0, resultLength).map(_ => values.pop())
  callStack.pop()
  const ctx = callStack.peek()
  returnValues.forEach(ctx.values.push)
}

// Internal instructions generated by compiler
export const internalInstructionSet: PartialInstructionSet<
  WASMCode,
  WASMMemory
> = code => {
  switch (code.opcode) {
    case "_push":
      return (code, memory, programCounter) => {
        const { callStack } = memory

        const resultLength = code.parameters[0] as number
        const offset = code.parameters[1] as number

        // 相対アドレス
        const labelPosition = programCounter.value + offset

        callStack.push(new WASMContext(resultLength, labelPosition))
      }
    case "_pop":
      return (_, memory) => {
        popStack(memory)
      }
  }
  return null
}
